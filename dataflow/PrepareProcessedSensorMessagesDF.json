{
	"name": "PrepareProcessedSensorMessagesDF",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SensorMessagesCSV",
						"type": "DatasetReference"
					},
					"name": "ReadSensorMessagesBlob"
				},
				{
					"dataset": {
						"referenceName": "RegionThresholdsDataset",
						"type": "DatasetReference"
					},
					"name": "RegionThresholdsDS"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "LookupMaxTempHumiThreshold"
				},
				{
					"name": "SelectPrimaryColumns"
				},
				{
					"name": "PrepareTempProcessStatus"
				},
				{
					"name": "PreparePlantStatus"
				}
			],
			"script": "source(output(\n\t\tRegion as string,\n\t\tPlant as string,\n\t\tAverageTemperature as integer,\n\t\tAverageHumidity as integer,\n\t\tTemperatureDescription as string,\n\t\tProcessedTime as timestamp,\n\t\tPlantType as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> ReadSensorMessagesBlob\nsource(output(\n\t\tRegion as string,\n\t\tPlantType as string,\n\t\tMTT as integer,\n\t\tMTH as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> RegionThresholdsDS\nReadSensorMessagesBlob, RegionThresholdsDS lookup(ReadSensorMessagesBlob@Region == RegionThresholdsDS@Region\n\t&& ReadSensorMessagesBlob@PlantType == RegionThresholdsDS@PlantType,\n\tmultiple: false,\n\tpickup: 'first',\n\tasc(RegionThresholdsDS@Region, true),\n\tasc(RegionThresholdsDS@PlantType, true),\n\tbroadcast: 'right')~> LookupMaxTempHumiThreshold\nLookupMaxTempHumiThreshold select(mapColumn(\n\t\tRegion = ReadSensorMessagesBlob@Region,\n\t\tPlant,\n\t\tAverageTemperature,\n\t\tAverageHumidity,\n\t\tTemperatureDescription,\n\t\tProcessedTime,\n\t\tPlantType = ReadSensorMessagesBlob@PlantType,\n\t\tMTT,\n\t\tMTH\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectPrimaryColumns\nSelectPrimaryColumns derive(TempProcessStatus = case(AverageTemperature > MTT, \"Warning\", \"Normal\"),\n\t\tHumiProcessStatus = case(AverageHumidity > MTH, \"Warning\", \"Normal\")) ~> PrepareTempProcessStatus\nPrepareTempProcessStatus derive(PlantStatus = case(TempProcessStatus == \"Warning\" && HumiProcessStatus == \"Warning\", \"Critical\", \r\n    TempProcessStatus == \"Warning\" || HumiProcessStatus == \"Warning\", \"Warning\", \"Normal\") ) ~> PreparePlantStatus"
		}
	}
}